{"version":3,"sources":["components/Home.js","components/Stuff.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Home","style","textAlign","color","backgroundColor","className","Standards","fontWeight","Navigation","onTargetScroll","e","documentElement","document","body","navElem","getElementById","scrollTop","includes","curClassNames","newClassName","replace","window","addEventListener","this","id","class","to","onClick","location","reload","type","data-target","aria-controls","aria-expanded","aria-label","Component","App","display","flexDirection","minHeight","flex","fixed","path","component","Stuff","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ySAceA,EAXF,WACT,OACG,6BACA,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BACtC,wBAAKC,MAAO,CAACC,UAAW,SAASC,MAAO,QAAUC,gBAAiB,KAAnE,QACC,uBAAGC,UAAU,8BAAb,4BCYKC,EAjBG,WAEd,OACE,6BACE,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BAAK,6BACxC,wBAAKL,MAAO,CAACC,UAAW,SAASC,MAAO,UAAYC,gBAAiB,KAArE,4BACA,6BACA,wBAAIH,MAAO,CAACE,MAAO,UAAWI,WAAY,SAA1C,kBACA,uBAAGF,UAAU,4BAAb,cACa,8BAGb,+BCTaG,G,kNAOnBC,eAAiB,SAAAC,GAEf,IAAMC,EAAkBC,SAASD,iBAAmBC,SAASC,KACvDC,EAAUF,SAASG,eAAe,YAExC,GAEEJ,EAAgBK,UAAY,KAC3BF,EAAQT,UAAUY,SAAS,YAE9B,CACE,IAAMC,EAAgBJ,EAAQT,UAC9BS,EAAQT,UAAYa,EAAgB,iBAGjC,GAAkC,IAA9BP,EAAgBK,UACzB,CACE,IACMG,EADgBL,EAAQT,UACKe,QAAQ,WAAY,IACvDN,EAAQT,UAAYc,I,kEAtBtBE,OAAOC,iBAAiB,SAAUC,KAAKd,kB,+BA4BvC,OACE,yBACEJ,UAAU,+DACVmB,GAAG,YAEL,yBAAKC,MAAM,sBACX,0BAAMA,MAAM,kCAAZ,oDAME,yBAAKpB,UAAU,aACb,kBAAC,IAAD,CAAMA,UAAU,eAAeqB,GAAG,SAClC,4BACEC,QAAS,kBAAMN,OAAOO,SAASC,QAAO,IACtCxB,UAAU,iBACVyB,KAAK,SACLC,cAAY,oBACZC,gBAAc,mBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAM7B,UAAU,yBAGlB,yBAAKmB,GAAG,oBACN,wBAAInB,UAAU,sBAEZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAASqB,GAAG,QACV,0BAAMrB,UAAU,YAAhB,UAIJ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAASqB,GAAG,SACV,0BAAMrB,UAAU,YAAhB,mB,GArEsB8B,cCmDzBC,G,mLAxCX,OACE,kBAAC,IAAD,KACA,6BACE,6BACA,6BACA,8BAGA,yBACE/B,UAAU,MACVJ,MAAO,CACLoC,QAAS,OACTC,cAAe,SACfC,UAAW,MACXpC,MAAO,WAET,kBAAC,EAAD,CAAYE,UAAU,mBACtB,yBAAKA,UAAU,qBACf,yBAAKA,UAAU,kBAAkBJ,MAAO,CAAEuC,KAAM,aAChD,yBAAKnC,UAAU,uDAAuDoC,MAAM,MAAMxC,MAAO,CAAEsC,UAAW,QACxG,6BACI,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOG,KAAK,OAAOC,UAAW3C,IAC9B,kBAAC,IAAD,CAAO0C,KAAK,QAAQC,UAAWC,IAChC,kBAAC,IAAD,CAAOD,UAAW3C,MAGtB,4BAAQK,UAAU,iBACd,yBAAKA,UAAU,iBACb,uBAAGA,UAAU,8BAAb,oB,GAlCI8B,cCAEU,QACW,cAA7BxB,OAAOO,SAASkB,UAEe,UAA7BzB,OAAOO,SAASkB,UAEhBzB,OAAOO,SAASkB,SAASC,MACvB,2D,MCRNC,IAASC,OAEP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtC,SAASG,eAAe,SDoHpB,kBAAmBoC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.61ed8de9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Home = () => {\r\n    return (\r\n       <div>\r\n       <br/><br/><br/><br/><br/><br/><br/><br/><br/>\r\n         < h2 style={{textAlign: \"center\",color: \"white\" , backgroundColor: \"\"}}>Home</h2>\r\n          <p className=\"m-0 text-center text-white\">\r\n            Always Bulking Nation.\r\n          </p>\r\n       </div>\r\n    );\r\n}\r\nexport default Home;\r\n","import React from 'react';\r\n\r\n\r\nconst Standards = () =>\r\n{\r\n    return (\r\n      <div>\r\n        <br/><br/><br/><br/><br/><br/><br/><br/><br/>\r\n        < h2 style={{textAlign: \"center\",color: \"#229ed4\" , backgroundColor: \"\"}}>Standards and Guidelines</h2>\r\n        <br />\r\n        <h2 style={{color: \"#229ed4\", fontWeight: 'bold'}}>Example thing </h2>\r\n        <p className=\"m-0 text-left text-white\">\r\n          French Fry <br/>\r\n\r\n        </p>\r\n        <br/>\r\n     </div>\r\n    );\r\n}\r\n\r\nexport default Standards;\r\n","import React, { Component } from \"react\";\r\nimport { NavLink, Link } from \"react-router-dom\";\r\n\r\nimport \"./../App.css\";\r\n\r\n\r\nexport default class Navigation extends Component\r\n{\r\n  componentDidMount()\r\n  {\r\n    window.addEventListener(\"scroll\", this.onTargetScroll);\r\n  }\r\n\r\n  onTargetScroll = e =>\r\n  {\r\n    const documentElement = document.documentElement || document.body;\r\n    const navElem = document.getElementById(\"main-nav\");\r\n\r\n    if\r\n    (\r\n      documentElement.scrollTop > 50 &&\r\n      !navElem.className.includes(\"scrolled\")\r\n    )\r\n    {\r\n      const curClassNames = navElem.className;\r\n      navElem.className = curClassNames + \" scrolled\";\r\n    }\r\n\r\n    else if (documentElement.scrollTop === 0)\r\n    {\r\n      const curClassNames = navElem.className;\r\n      const newClassName = curClassNames.replace(/scrolled/, \"\");\r\n      navElem.className = newClassName;\r\n    }\r\n  };\r\n\r\n  render()\r\n  {\r\n    return (\r\n      <nav\r\n        className=\"navbar transparent navbar-expand-lg fixed-top App-Navigation\"\r\n        id=\"main-nav\"\r\n      >\r\n      <nav class=\"navbar navbar-dark\">\r\n      <span class=\"navbar-brand mb-0 h1 fixed-top\">\r\n      &nbsp;&nbsp;&nbsp;\r\n      &nbsp;&nbsp;&nbsp;\r\n      Always Bulking Nation</span>\r\n      </nav>\r\n\r\n        <div className=\"container\">\r\n          <Link className=\"navbar-brand\" to=\"Home\"></Link>\r\n          <button\r\n            onClick={() => window.location.reload(false)}\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-target=\"#navbarResponsive\"\r\n            aria-controls=\"navbarResponsive\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\" />\r\n          </button>\r\n\r\n          <div id=\"navbarResponsive\">\r\n            <ul className=\"navbar-nav ml-auto\">\r\n\r\n              <li className=\"nav-item\">\r\n                <NavLink to=\"Home\">\r\n                  <span className=\"nav-link\">Home</span>\r\n                </NavLink>\r\n              </li>\r\n\r\n              <li className=\"nav-item\">\r\n                <NavLink to=\"Stuff\">\r\n                  <span className=\"nav-link\">Stuff</span>\r\n                </NavLink>\r\n              </li>\r\n\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nimport Home from './components/Home';\r\nimport Stuff from './components/Stuff';\r\nimport Navigation from './components/Navigation';\r\n\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport \"./bootstrap-override.css\";\r\n\r\n\r\nclass App extends Component {\r\n\r\n  render()\r\n   {\r\n\r\n    return (\r\n      <BrowserRouter>\r\n      <div>\r\n        <br />\r\n        <br />\r\n        <br />\r\n\r\n      </div>\r\n        <div\r\n          className=\"App\"\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            minHeight: \"5vh\",\r\n            color: \"white\"\r\n          }}></div>\r\n          <Navigation className=\"App-Navigation\"  />\r\n          <div className=\"fixed-background\" />\r\n          <div className=\"container-fluid\" style={{ flex: \"1 1 auto\" }}>\r\n          <div className=\"row flex-xl-nowrap flex-column justify-content-start\" fixed=\"top\" style={{ minHeight: \"0%\" }}></div>\r\n        <div>\r\n            <Switch>\r\n             <Route path=\"Home\" component={Home}/>\r\n             <Route path=\"Stuff\" component={Stuff}/>\r\n            <Route component={Home}/>\r\n           </Switch>\r\n        </div>\r\n        <footer className=\"py-3 bg-black\">\r\n            <div className=\"container col\">\r\n              <p className=\"m-0 text-center text-white\">\r\n              ABN 2020\r\n              </p>\r\n            </div>\r\n        </footer>\r\n        </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\n\r\n\r\nReactDOM.render\r\n(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}